/*
  Minimal Esp32 Websockets Server

  This sketch:
        1. Connects to a WiFi network
        2. Starts a websocket server on port 80
        3. Waits for connections
        4. Once a client connects, it wait for a message from the client
        5. Sends an "echo" message to the client
        6. closes the connection and goes back to step 3

  Hardware:
        For this sketch you only need an ESP32 board.

  Created 15/02/2019
  By Gil Maimon
  https://github.com/gilmaimon/ArduinoWebsockets
*/

#include <ArduinoWebsockets.h>
#include <ESPAsyncWebServer.h>
#include <ESPmDNS.h>
#include <FS.h>
#include <SPIFFS.h>
#include <WiFi.h>

const char* ssid = "Uyamak";          // Enter SSID
const char* password = "y5?*tFrdQU";  // Enter Password

// Create Async WebServer
AsyncWebServer server(443);  // Port 443 for secure WebSocket

using namespace websockets;

WebsocketsServer wsServer;
void setup() {
    Serial.begin(115200);

    // Start SPIFFS to serve the certificate and key
    if (!SPIFFS.begin(true)) {
        Serial.println("An Error has occurred while mounting SPIFFS");
        return;
    }

    // Connect to wifi
    WiFi.begin(ssid, password);

    // Wait some time to connect to wifi
    for (int i = 0; i < 15 && WiFi.status() != WL_CONNECTED; i++) {
        Serial.print(".");
        delay(1000);
    }

    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());  // You can get IP address assigned to ESP

    // Get the ESP32's MAC address
    // convert mac address to unique number

    /*uint32_t chipId = 0;
    for (int i = 0; i < 17; i = i + 8) {
        chipId |= ((ESP.getEfuseMac() >> (40 - i)) & 0xff) << i;
    }
    String hostname = "CIT-" + String(chipId);*/
    String mac = WiFi.macAddress();
    mac.replace(":", "");
    String hostname = "CIT-" + mac;

    // Start mDNS with the unique hostname
    if (!MDNS.begin(hostname.c_str())) {
        Serial.println("Error starting mDNS");
        return;
    }
    Serial.print("mDNS started with hostname: ");
    Serial.println(hostname.c_str());

    // Advertise additional services (optional)
    MDNS.addService("http", "tcp", 80);  // Example for WebSocket service
    MDNS.addService("ws", "tcp", 443);   // Example for WebSocket service

    // Secure WebSocket with SSL
    server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
        request->send(200, "text/plain", "Hello, Secure WebSocket!");
    });

    wsServer.listen(443);

    Serial.print("Is server live? ");
    Serial.println(wsServer.available());
}

void loop() {
    WebsocketsClient client = wsServer.accept();
    if (client.available()) {
        WebsocketsMessage msg = client.readBlocking();

        // log
        Serial.print("Got Message: ");
        Serial.println(msg.data());

        // return echo
        client.send("Echo: " + msg.data());

        // close the connection
        client.close();
    }

    delay(100);
}